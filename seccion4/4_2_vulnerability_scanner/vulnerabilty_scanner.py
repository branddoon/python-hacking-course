import requests
from bs4 import BeautifulSoup
from concurrent.futures import ThreadPoolExecutor
from rich.console import Console
from rich.table import Table

class VulnerabilityScanner:
    def __init__(self):
        self.headers = {
             'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
        }

    def search_cves(self, service):
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch={service}"
        response = requests.get(url, headers=self.headers)

        if response.status_code != 200:
            return "No se pudo obtener informacion de las vulnerabilidades"
        
        data_dict = response.json()
        cves_info = []

        for vulnerability in data_dict['vulnerabilities']:
            cve_id = vulnerability['cve']['id']
            descriptions = vulnerability['cve']['descriptions']
            description = next((desc['value'] for desc in descriptions if desc['lang'] == 'es'),None)
            cves_info.append(
                {
                    'cve_id': cve_id,
                    'description': description
                }
            )
        with ThreadPoolExecutor(max_workers=20) as executor:
            executor.map(self.search_cve_details, cves_info)
        
        return cves_info

    def search_cve_details(self, cves_info):
        cve_details_url = f"https://www.cvedetails.com/cve/{cves_info['cve_id']}/"
        response = requests.get(cve_details_url, headers=self.headers)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')
            cvss_info = soup.find('div',{'class': 'cvssbox'})
            cves_info['cvss'] = cvss_info.get_text().strip() if cvss_info else "No disponible"
            cves_info['url'] = cve_details_url

    def pretty_print(self, cves_details):
        console = Console()
        table = Table(title="Vulnerabilidades encontradas")
        
        table.add_column("CVE_ID", style="cyan", no_wrap=True)
        table.add_column("Description", style="magenta")
        table.add_column("CVSS", style="green")
        table.add_column("URL", style="blue")

        #Convertir el CVSS a float

        for cve in cves_details:
            try:
                cve['cvss'] = float(cve['cvss'])
            except (ValueError, TypeError):
                cve['cvss'] = 0.0
        
        #Ordenar las vulnerabilidades

        cves_info_sorted = sorted(cves_details, key=lambda x:x['cvss'], reverse=False)

        for cve in cves_info_sorted:
            cvss_str = str(cve['cvss']) if cve['cvss'] != 0.0 else "No disponible"

            table.add_row(
                cve['cve_id'],
                cve['description'] or "No disponible",
                cvss_str,
                cve['url'] or "No disponible",
                end_section=True
            )

        console.print(table)